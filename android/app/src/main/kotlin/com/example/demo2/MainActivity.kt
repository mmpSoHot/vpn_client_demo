package com.example.demo2

import android.content.Intent
import android.net.VpnService
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel
import io.nekohasekai.libbox.Libbox
import io.nekohasekai.libbox.SetupOptions
import java.io.File

class MainActivity : FlutterActivity() {
    
    companion object {
        private const val CHANNEL = "vpn_service"
        private const val VPN_REQUEST_CODE = 100
    }
    
    private var pendingResult: MethodChannel.Result? = null
    
    override fun onCreate(savedInstanceState: android.os.Bundle?) {
        super.onCreate(savedInstanceState)
        
        android.util.Log.d("MainActivity", "üöÄ MainActivity.onCreate() ÂºÄÂßã")
        
        // ÂàùÂßãÂåñ libbox (ÈáçË¶Å!)
        setupLibbox()
        
        android.util.Log.d("MainActivity", "‚úÖ MainActivity.onCreate() ÂÆåÊàê")
    }
    
    private fun setupLibbox() {
        android.util.Log.d("MainActivity", "üîß ÂºÄÂßãÂàùÂßãÂåñ Libbox...")
        try {
            val baseDir = File(filesDir, "sing-box")
            val workingDir = File(baseDir, "run")
            val tempDir = cacheDir
            
            android.util.Log.d("MainActivity", "üìÅ ÂàõÂª∫ÁõÆÂΩï...")
            android.util.Log.d("MainActivity", "   baseDir: ${baseDir.path}")
            android.util.Log.d("MainActivity", "   workingDir: ${workingDir.path}")
            android.util.Log.d("MainActivity", "   tempDir: ${tempDir.path}")
            
            baseDir.mkdirs()
            workingDir.mkdirs()
            tempDir.mkdirs()
            
            // Â§çÂà∂ assets ‰∏≠ÁöÑ .srs Êñá‰ª∂Âà∞ working directory
            android.util.Log.d("MainActivity", "üì¶ ÂºÄÂßãÂ§çÂà∂ .srs Êñá‰ª∂...")
            copyAssetsToWorkingDir(workingDir)
            android.util.Log.d("MainActivity", "‚úÖ .srs Êñá‰ª∂Â§çÂà∂ÂÆåÊàê")
            
            android.util.Log.d("MainActivity", "‚öôÔ∏è Ë∞ÉÁî® Libbox.setup()...")
            Libbox.setup(SetupOptions().also {
                it.basePath = baseDir.path
                it.workingPath = workingDir.path
                it.tempPath = tempDir.path
            })
            
            android.util.Log.d("MainActivity", "‚úÖ Libbox ÂàùÂßãÂåñÊàêÂäü")
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå Libbox ÂàùÂßãÂåñÂ§±Ë¥•", e)
            e.printStackTrace()
        }
    }
    
    private fun copyAssetsToWorkingDir(workingDir: File) {
        // ËßÑÂàôÊñá‰ª∂Êò†Â∞ÑÔºöÊñá‰ª∂Âêç -> assets Â≠êÁõÆÂΩï
        val srsFilesMap = mapOf(
            "geosite-private.srs" to "geosite",
            "geosite-cn.srs" to "geosite",
            "geoip-cn.srs" to "geoip"
        )
        
        android.util.Log.d("MainActivity", "üì¶ ÂºÄÂßãÂ§çÂà∂ ${srsFilesMap.size} ‰∏™ËßÑÂàôÊñá‰ª∂Âà∞: ${workingDir.path}")
        
        // ÂÖàÂàóÂá∫ assets ÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂ÔºàÁî®‰∫éË∞ÉËØïÔºâ
        try {
            val geositeFiles = assets.list("flutter_assets/assets/datas/geosite")
            val geoipFiles = assets.list("flutter_assets/assets/datas/geoip")
            if (geositeFiles != null) {
                android.util.Log.d("MainActivity", "üìÅ geosite Êñá‰ª∂: ${geositeFiles.joinToString(", ")}")
            }
            if (geoipFiles != null) {
                android.util.Log.d("MainActivity", "üìÅ geoip Êñá‰ª∂: ${geoipFiles.joinToString(", ")}")
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå ÂàóÂá∫ assets Êñá‰ª∂Â§±Ë¥•", e)
        }
        
        for ((fileName, subDir) in srsFilesMap) {
            val destFile = File(workingDir, fileName)
            try {
                android.util.Log.d("MainActivity", "   Â§ÑÁêÜÊñá‰ª∂: $fileName (‰ªé $subDir)")
                
                // ÊâìÂºÄ assets Êñá‰ª∂ÔºàFlutter assets ÈúÄË¶ÅÂä† flutter_assets/ ÂâçÁºÄÔºâ
                val assetPath = "flutter_assets/assets/datas/$subDir/$fileName"
                android.util.Log.d("MainActivity", "      assets Ë∑ØÂæÑ: $assetPath")
                assets.open(assetPath).use { input ->
                    val fileSize = input.available()
                    android.util.Log.d("MainActivity", "      ÂéüÊñá‰ª∂Â§ßÂ∞è: $fileSize Â≠óËäÇ")
                    
                    // ÂÜôÂÖ•ÁõÆÊ†áÊñá‰ª∂
                    destFile.outputStream().use { output ->
                        val bytesCopied = input.copyTo(output)
                        android.util.Log.d("MainActivity", "      Â∑≤Â§çÂà∂: $bytesCopied Â≠óËäÇ")
                    }
                }
                
                // È™åËØÅÊñá‰ª∂ÊòØÂê¶Â≠òÂú®‰∏îÊúâÂÜÖÂÆπ
                if (destFile.exists()) {
                    val size = destFile.length()
                    android.util.Log.d("MainActivity", "   ‚úÖ Â§çÂà∂ÊàêÂäü: ${destFile.path} ($size Â≠óËäÇ)")
                } else {
                    android.util.Log.e("MainActivity", "   ‚ùå Êñá‰ª∂‰∏çÂ≠òÂú®: ${destFile.path}")
                }
            } catch (e: Exception) {
                android.util.Log.e("MainActivity", "   ‚ùå Â§çÂà∂ËßÑÂàôÊñá‰ª∂Â§±Ë¥•: $fileName", e)
                android.util.Log.e("MainActivity", "      ÈîôËØØÁ±ªÂûã: ${e.javaClass.simpleName}")
                android.util.Log.e("MainActivity", "      ÈîôËØØÊ∂àÊÅØ: ${e.message}")
            }
        }
        
        // ÂàóÂá∫Â∑•‰ΩúÁõÆÂΩï‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂ÔºàÈ™åËØÅÔºâ
        try {
            val files = workingDir.listFiles()
            if (files != null && files.isNotEmpty()) {
                android.util.Log.d("MainActivity", "üìÅ Â∑•‰ΩúÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂:")
                files.forEach { file ->
                    android.util.Log.d("MainActivity", "   - ${file.name} (${file.length()} Â≠óËäÇ)")
                }
            } else {
                android.util.Log.w("MainActivity", "‚ö†Ô∏è Â∑•‰ΩúÁõÆÂΩï‰∏∫Á©∫: ${workingDir.path}")
            }
        } catch (e: Exception) {
            android.util.Log.e("MainActivity", "‚ùå ÂàóÂá∫Â∑•‰ΩúÁõÆÂΩïÊñá‰ª∂Â§±Ë¥•", e)
        }
    }
    
    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)
        
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL)
            .setMethodCallHandler { call, result ->
                when (call.method) {
                    "checkPermission" -> {
                        // Ê£ÄÊü• VPN ÊùÉÈôê
                        val intent = VpnService.prepare(this)
                        result.success(intent == null)
                    }
                    
                    "requestPermission" -> {
                        // ËØ∑Ê±Ç VPN ÊùÉÈôê
                        val intent = VpnService.prepare(this)
                        if (intent != null) {
                            pendingResult = result
                            startActivityForResult(intent, VPN_REQUEST_CODE)
                        } else {
                            result.success(true)
                        }
                    }
                    
                    "startVpn" -> {
                        // ÂêØÂä® VPN
                        val config = call.argument<String>("config")
                        if (config != null) {
                            val intent = Intent(this, com.example.demo2.VpnService::class.java).apply {
                                action = com.example.demo2.VpnService.ACTION_START
                                putExtra(com.example.demo2.VpnService.EXTRA_CONFIG, config)
                            }
                            startService(intent)
                            result.success(true)
                        } else {
                            result.error("INVALID_CONFIG", "ÈÖçÁΩÆ‰∏∫Á©∫", null)
                        }
                    }
                    
                    "stopVpn" -> {
                        // ÂÅúÊ≠¢ VPN
                        val intent = Intent(this, com.example.demo2.VpnService::class.java).apply {
                            action = com.example.demo2.VpnService.ACTION_STOP
                        }
                        startService(intent)
                        result.success(true)
                    }
                    
                    "isRunning" -> {
                        // Ê£ÄÊü• VPN ÊòØÂê¶ËøêË°å‰∏≠
                        // ÈÄöËøáÊ£ÄÊü• VPN ÊúçÂä°ÊòØÂê¶Âú®ËøêË°åÊù•Âà§Êñ≠
                        val isRunning = com.example.demo2.VpnService.isServiceRunning
                        result.success(isRunning)
                    }
                    
                    else -> result.notImplemented()
                }
            }
    }
    
    @Deprecated("Deprecated in Java")
    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        
        if (requestCode == VPN_REQUEST_CODE) {
            pendingResult?.success(resultCode == RESULT_OK)
            pendingResult = null
        }
    }
}
